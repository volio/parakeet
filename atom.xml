<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Parakeet</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://niconiconi.org/"/>
  <updated>2020-01-27T07:27:15.994Z</updated>
  <id>https://niconiconi.org/</id>
  
  <author>
    <name>volio</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang Slice Shuffle</title>
    <link href="https://niconiconi.org/2020/01/21/golang-slice-shuffle/"/>
    <id>https://niconiconi.org/2020/01/21/golang-slice-shuffle/</id>
    <published>2020-01-21T09:28:00.000Z</published>
    <updated>2020-01-27T07:27:15.994Z</updated>
    
    <content type="html"><![CDATA[<p>使用 rand 包提供的 Shuffle 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;math&#x2F;rand&quot;<br>&quot;strings&quot;<br>)<br><br>func main() &#123;<br>words :&#x3D; strings.Fields(&quot;ink runs from the corners of my mouth&quot;)<br>rand.Shuffle(len(words), func(i, j int) &#123;<br>words[i], words[j] &#x3D; words[j], words[i]<br>&#125;)<br>fmt.Println(words)<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 rand 包提供的 Shuffle 方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;package main&lt;br&gt;&lt;br&gt;import (&lt;br&gt;	&amp;quot;fmt&amp;quot;&lt;br&gt;	&amp;quot;math&amp;#x2F;rand&amp;quot;&lt;br&gt;	&amp;quot;strings&amp;quot;&lt;br&gt;)&lt;br&gt;&lt;br&gt;func main() &amp;#123;&lt;br&gt;	words :&amp;#x3D; strings.Fields(&amp;quot;ink runs from the corners of my mouth&amp;quot;)&lt;br&gt;	rand.Shuffle(len(words), func(i, j int) &amp;#123;&lt;br&gt;		words[i], words[j] &amp;#x3D; words[j], words[i]&lt;br&gt;	&amp;#125;)&lt;br&gt;	fmt.Println(words)&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用工具（持续更新）</title>
    <link href="https://niconiconi.org/2020/01/08/common-tools/"/>
    <id>https://niconiconi.org/2020/01/08/common-tools/</id>
    <published>2020-01-08T10:48:00.000Z</published>
    <updated>2020-01-27T07:27:15.994Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 容量预估：<a href="http://www.redis.cn/redis_memory/" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 容量预估：&lt;a href=&quot;http://www.redis.cn/redis_memory/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Systemd 配置</title>
    <link href="https://niconiconi.org/2020/01/07/systemd/"/>
    <id>https://niconiconi.org/2020/01/07/systemd/</id>
    <published>2020-01-07T06:00:00.000Z</published>
    <updated>2020-01-27T07:27:15.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动重启配置"><a href="#自动重启配置" class="headerlink" title="自动重启配置"></a>自动重启配置</h2><p>自动重启主要依赖三个配置参数，分别是 Restart、 StartLimitIntervalSec 和 StartLimitBurst。</p><h3 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h3><ul><li>no：不会重启</li><li>on-success：正常退出时重启</li><li>on-failure：非正常退出时重启</li><li>on-abnormal：被信号终止或超时时重启</li><li>on-watchdog</li><li>on-abort</li><li>always：只要退出就重启</li></ul><h3 id="频率限制"><a href="#频率限制" class="headerlink" title="频率限制"></a>频率限制</h3><p>StartLimitIntervalSec 用于指定一个重启间隔，默认为 10。StartLimitBurst 指在上述重启间隔内进程最多重启的次数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>综合以上三个参数，给出的示例配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">StartLimitIntervalSec&#x3D;14400<br>StartLimitBurst&#x3D;10<br>Restart&#x3D;on-failure<br></code></pre></td></tr></table></figure><p>代表 14400 秒内最多允许进程重启十次，当非正常退出时重启。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自动重启配置&quot;&gt;&lt;a href=&quot;#自动重启配置&quot; class=&quot;headerlink&quot; title=&quot;自动重启配置&quot;&gt;&lt;/a&gt;自动重启配置&lt;/h2&gt;&lt;p&gt;自动重启主要依赖三个配置参数，分别是 Restart、 StartLimitIntervalSec 和 StartLimitBurst。&lt;/p&gt;
&lt;h3 id=&quot;Restart&quot;&gt;&lt;a href=&quot;#Restart&quot; class=&quot;headerlink&quot; title=&quot;Restart&quot;&gt;&lt;/a&gt;Restart&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;no：不会重启&lt;/li&gt;
&lt;li&gt;on-success：正常退出时重启&lt;/li&gt;
&lt;li&gt;on-failure：非正常退出时重启&lt;/li&gt;
&lt;li&gt;on-abnormal：被信号终止或超时时重启&lt;/li&gt;
&lt;li&gt;on-watchdog&lt;/li&gt;
&lt;li&gt;on-abort&lt;/li&gt;
&lt;li&gt;always：只要退出就重启&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;频率限制&quot;&gt;&lt;a href=&quot;#频率限制&quot; class=&quot;headerlink&quot; title=&quot;频率限制&quot;&gt;&lt;/a&gt;频率限制&lt;/h3&gt;&lt;p&gt;StartLimitIntervalSec 用于指定一个重启间隔，默认为 10。StartLimitBurst 指在上述重启间隔内进程最多重启的次数。&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;综合以上三个参数，给出的示例配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;StartLimitIntervalSec&amp;#x3D;14400&lt;br&gt;StartLimitBurst&amp;#x3D;10&lt;br&gt;Restart&amp;#x3D;on-failure&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代表 14400 秒内最多允许进程重启十次，当非正常退出时重启。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用 Linux 命令（持续更新）</title>
    <link href="https://niconiconi.org/2019/12/31/common-linux-command/"/>
    <id>https://niconiconi.org/2019/12/31/common-linux-command/</id>
    <published>2019-12-31T11:00:00.000Z</published>
    <updated>2020-01-27T07:27:15.994Z</updated>
    
    <content type="html"><![CDATA[<p>查看端口监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">netstat -nlp<br></code></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ps -aux<br></code></pre></td></tr></table></figure><p>连接 postgresql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">psql -h 127.0.0.1 -p 5432 -U user -d dbname<br></code></pre></td></tr></table></figure><p>连接 redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">redis-cli -h 127.0.0.1 -p 6379 -a &quot;password&quot;<br></code></pre></td></tr></table></figure><p>安装 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh | sh get-docker.sh<br></code></pre></td></tr></table></figure><p>Kafka Console Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">kafka-console-consumer.sh --bootstrap-server kafka-server:9092 --topic topicname<br></code></pre></td></tr></table></figure><p>使用 Docker 运行一个带密码的 Redis 测试容器 （开启 AOF 快照， 公网映射）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">docker run -d --name redis -e REDIS_PASSWORD&#x3D;YOURREDISPASSWORD -p 6390:6379 --restart always redis &#x2F;bin&#x2F;sh -c &#39;redis-server --appendonly yes --requirepass $&#123;REDIS_PASSWORD&#125;&#39;<br></code></pre></td></tr></table></figure><p>创建 Swap 分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;opt&#x2F;swap&#x2F;swapfile bs&#x3D;1024 count&#x3D;6291456 &#x2F;&#x2F;6G swap<br>chmod 600 &#x2F;opt&#x2F;swap&#x2F;swapfile<br>mkswap &#x2F;opt&#x2F;swap&#x2F;swapfile<br>swapon &#x2F;opt&#x2F;swap&#x2F;swapfile<br>echo &quot;&#x2F;opt&#x2F;swap&#x2F;swapfile swap swap defaults 0 0&quot;&gt;&gt;&#x2F;etc&#x2F;fstab<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看端口监听&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;netstat -nlp&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看进程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;ps -aux&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;连接 postgresql&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;psql -h 127.0.0.1 -p 5432 -U user -d dbname&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;连接 redis&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;redis-cli -h 127.0.0.1 -p 6379 -a &amp;quot;password&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装 Docker&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plain&quot;&gt;curl -fsSL https:&amp;#x2F;&amp;#x2F;get.docker.com -o get-docker.sh | sh get-docker.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你好，世界</title>
    <link href="https://niconiconi.org/2019/12/31/hello-world/"/>
    <id>https://niconiconi.org/2019/12/31/hello-world/</id>
    <published>2019-12-31T04:39:00.000Z</published>
    <updated>2020-01-27T07:27:15.994Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 进行写作</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 进行写作&lt;/p&gt;

    
    </summary>
    
    
    
  </entry>
  
</feed>
